name: 'Release APK'
description: 'Release the patched APK'
inputs:
  github_token:
    description: 'GitHub token'
    required: true
  app_name:
    description: 'Name of the app being released'
    required: false
    default: 'APK'
runs:
  using: 'composite'
  steps:
    - name: Generate release info
      shell: bash
      id: changelog
      run: |
        set -euo pipefail

        OUTFILE="${GITHUB_WORKSPACE:-.}/release/body.md"
        mkdir -p "$(dirname "$OUTFILE")"
        : > "$OUTFILE"

        label="${{ inputs.app_name }}"
        cleaned="$(printf '%s' "$label" | sed -E 's/\s*\([^)]*\)$//; s/\.apk$//I; s/^[[:space:]]+|[[:space:]]+$//g')"

        {
            echo
            echo "ReBuild APKs on $(date -u +'%Y-%m-%d %H:%M UTC')."
            for apk in ./release/*"$cleaned"*.apk; do
                if [ -f "$apk" ]; then
                    version_info=$(aapt dump badging "$apk" | awk -F"'" '/versionName=/{print $2}')
                    echo "- $version_info"
                fi
            done
            echo
          echo "First install [MicroG-RE](https://github.com/WSTxda/MicroG-RE/releases/download/5.12/microg-release.apk) if you haven't already for Google Photos, YouTube, and YouTube Music APKs. Maintained by [Sabbir Bin Abbas](https://facebook.com/Sabbirba10)."
        } >> "$OUTFILE"

        echo "body<<EOF" >> "$GITHUB_OUTPUT"
        cat "$OUTFILE" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

    - name: Set release date (UTC)
      shell: bash
      id: release_date
      run: |
        echo "date_iso=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"
        echo "date_pretty=$(date -u +%d %B %Y)" >> "$GITHUB_OUTPUT"

    - name: Prepare APK filenames (clean app names)
      shell: bash
      run: |
        set -euo pipefail
        SRC="./release"
        DST="./release_renamed"
        rm -rf "$DST"
        mkdir -p "$DST"

        for f in "$SRC"/*.apk; do
          [ -e "$f" ] || continue
          base="$(basename "$f" .apk)"
          base_lc="$(printf '%s' "$base" | tr '[:upper:]' '[:lower:]')"

          # remove common CPU/ABI suffixes and revanced-like modifiers
          cleaned="$(printf '%s' "$base_lc" | sed -E 's/(-arm64-v8a|-arm64-v7a|-arm64|-armeabi-v7a|-v8a|-arm|-x86_64|-x86)//g; s/(-revanced|-revance|-rev|_revanced)$//g')"

          # normalize separators and trim hyphens
          cleaned="$(printf '%s' "$cleaned" | sed -E 's/[_ ]+/-/g; s/--+/-/g; s/^-+|-+$//g')"

          # map known apps to short canonical names
          case "$cleaned" in
            *youtube-music*|*youtubemusic*) name="youtube-music" ;;
            *youtube*|*yt*) name="youtube" ;;
            *messenger*|*fbmessenger*) name="messenger" ;;
            *instagram*|*insta*) name="instagram" ;;
            *googlephotos*|*photos*|*gg-photos*) name="googlephotos" ;;
            *photomath*|*photomath-revanced*) name="photomath" ;;
            *facebook*|*fb*) name="facebook" ;;
            *googlenews*|*news*) name="googlenews" ;;
            *duolingo*) name="duolingo" ;;
            *) name="$cleaned" ;;
          esac

          # ensure single -rebuild suffix
          if printf '%s' "$name" | grep -q -E '(-rebuild)$'; then
            newname="${name}.apk"
          else
            newname="${name}-rebuild.apk"
          fi

          cp -f "$f" "$DST/$newname"
        done

    - name: Create GitHub Release and upload assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_date.outputs.date_iso }}
        name: ${{ steps.release_date.outputs.date_pretty }}
        body: ${{ steps.changelog.outputs.body }}
        files: ./release_renamed/*.apk
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
